import { create } from 'zustand'
// MediaDB ÏùòÏ°¥ÏÑ± ÏôÑÏ†Ñ Ï†úÍ±∞ - ÏßÅÏ†ë ÌååÏùº ÏãúÏä§ÌÖú ÏÇ¨Ïö©
import { shuffleArray, getRandomElements, arrangeMediaByRatio, type MediaRatioConfig } from '@/utils/arrayUtils'
import type { UploadStatus, UploadProgressHandler, UploadStatusState } from '@/types'

// Í∞§Îü¨Î¶¨ ÌëúÏãúÏö© Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ (ÎØ∏ÎîîÏñ¥ ÌÜµÌï©)
export interface GalleryMediaData {
  id: string
  type: 'image' | 'video'
  url: string
  originalUrl: string
  width: number
  height: number
  fileName: string
  customName?: string
  uploadedAt: number
  duration?: number
  resolution?: string
}

// Zustand Ïä§ÌÜ†Ïñ¥ Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ Ï†ïÏùò
interface MediaStore {
  // ÏÉÅÌÉú
  media: GalleryMediaData[]
  isLoading: boolean
  isInitialized: boolean
  uploadQueue: UploadStatus[]
  overallProgress: number
  ratioConfig: MediaRatioConfig

  // Í∏∞Î≥∏ Ïï°ÏÖò
  loadMedia: () => Promise<void>
  addMedia: (files: File[], options?: { onProgress?: UploadProgressHandler }) => Promise<void>
  clearUploadQueue: () => void

  // ÎØ∏ÎîîÏñ¥ Í¥ÄÎ¶¨
  removeMedia: (id: string) => Promise<void>
  clearAllMedia: () => Promise<void>
  updateCustomName: (id: string, customName: string) => Promise<void>
  getStorageStats: () => Promise<{ count: number; estimatedSize: string; images: number; videos: number }>

  // Í≥†Í∏â Í∏∞Îä•
  shuffleMedia: () => void
  randomizeMedia: (count?: number) => void
  arrangeByRatio: (config?: Partial<MediaRatioConfig>) => void
  shuffleByMode: () => void
  updateRatioConfig: (config: Partial<MediaRatioConfig>) => void
  validateAndCleanData: () => Promise<void>

  // Ïú†Ìã∏Î¶¨Ìã∞
  deleteItemById: (id: string) => Promise<void>
}

// Zustand Ïä§ÌÜ†Ïñ¥ ÏÉùÏÑ±
export const useMediaStore = create<MediaStore>((set, get) => ({
  // Ï¥àÍ∏∞ ÏÉÅÌÉú
  media: [],
  isLoading: false,
  isInitialized: true,
  uploadQueue: [],
  overallProgress: 0,
  ratioConfig: {
    videoRatio: 0.15,
    topVideoCount: 3,
    shuffleMode: 'ratio-based'
  },

  // ÏßÅÏ†ë ÌååÏùº ÏãúÏä§ÌÖúÏóêÏÑú ÎØ∏ÎîîÏñ¥ Î°úÎìú (MediaDB ÏôÑÏ†Ñ Ïö∞Ìöå)
  loadMedia: async () => {
    try {
      set({ isLoading: true })

      // üîß ÌôòÍ≤ΩÏóê Í¥ÄÍ≥ÑÏóÜÏù¥ Ìï≠ÏÉÅ API ÏóîÎìúÌè¨Ïù∏Ìä∏ Ïö∞ÏÑ† ÏÇ¨Ïö©
      try {
        const response = await fetch('/api/railway/storage?action=list')
        if (response.ok) {
          const apiData = await response.json()

          if (apiData.success && apiData.data && Array.isArray(apiData.data)) {
            const galleryMedia: GalleryMediaData[] = apiData.data.map((item: any) => ({
              id: item.id || `${item.type}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
              type: item.type,
              url: item.url,
              originalUrl: item.originalUrl || item.url,
              width: item.width || 800,
              height: item.height || 600,
              fileName: item.fileName,
              customName: item.customName || item.fileName,
              uploadedAt: item.uploadedAt || Date.now(),
              duration: item.duration,
              resolution: item.resolution
            }))

            set({ media: galleryMedia, isLoading: false })
            console.log(`‚úÖ APIÏóêÏÑú ÎØ∏ÎîîÏñ¥ Î°úÎìú ÏôÑÎ£å: ${galleryMedia.length}Í∞ú`)
            return
          }
        }
      } catch (apiError) {
        console.warn('‚ö†Ô∏è API Î°úÎìú Ïã§Ìå®, ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©:', apiError)
      }

      // API Ïã§Ìå® Ïãú ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
      const galleryMedia: GalleryMediaData[] = [
        {
          id: 'test-img-1',
          type: 'image',
          url: '/uploads/images/test-image-1.jpg',
          originalUrl: '/uploads/images/test-image-1.jpg',
          width: 800,
          height: 600,
          fileName: 'test-image-1.jpg',
          customName: 'TEST IMAGE #1',
          uploadedAt: Date.now() - 86400000
        },
        {
          id: 'test-vid-1',
          type: 'video',
          url: '/uploads/videos/test-video-1.mp4',
          originalUrl: '/uploads/videos/test-video-1.mp4',
          width: 1280,
          height: 720,
          fileName: 'test-video-1.mp4',
          customName: 'TEST VIDEO #1',
          uploadedAt: Date.now() - 43200000,
          duration: 15,
          resolution: '1280x720'
        }
      ]

      set({ media: galleryMedia, isLoading: false })
      console.log(`‚úÖ ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞Î°ú ÎØ∏ÎîîÏñ¥ Î°úÎìú ÏôÑÎ£å: ${galleryMedia.length}Í∞ú`)

    } catch (error) {
      console.error('‚ùå ÎØ∏ÎîîÏñ¥ Î°úÎìú Ïã§Ìå®:', error)
      set({ media: [], isLoading: false })
      throw error
    }
  },

  // Ïã§Ï†ú Railway Storage API Í∏∞Î∞ò ÏóÖÎ°úÎìú
  addMedia: async (files: File[], options?: { onProgress?: UploadProgressHandler }) => {
    console.log('üîÑ Ïã§Ï†ú Railway Storage API ÏóÖÎ°úÎìú ÏãúÏûë:', files.length, 'Í∞ú ÌååÏùº')
    try {
      set({ isLoading: true })
      set({ uploadQueue: [], overallProgress: 0 })

      const total = files.length
      if (total === 0) {
        set({ isLoading: false })
        return
      }

      const queueBase = Date.now()
      const initialQueue: UploadStatus[] = files.map((file, index) => ({
        id: `${queueBase}-${index}`,
        fileName: file.name,
        type: file.type.startsWith('video/') ? 'video' : 'image',
        size: file.size,
        progress: 0,
        status: 'pending',
        startedAt: Date.now()
      }))

      set({ uploadQueue: initialQueue, overallProgress: 0 })

      const uploadedMedia: GalleryMediaData[] = []

      for (let index = 0; index < files.length; index++) {
        const file = files[index]
        const queueId = `${queueBase}-${index}`

        try {
          // ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏ - Ï≤òÎ¶¨ ÏãúÏûë
          set((state) => ({
            uploadQueue: state.uploadQueue.map((item) =>
              item.id === queueId ? { ...item, status: 'processing', progress: 0 } : item
            )
          }))

          options?.onProgress?.({
            fileName: file.name,
            processed: index,
            total: files.length,
            fileProgress: 0,
            overallProgress: Math.round((index / files.length) * 100),
            status: 'processing'
          })

          // Ïã§Ï†ú Railway Storage API Ìò∏Ï∂ú
          const formData = new FormData()
          formData.append('file', file)

          // ÎπÑÎîîÏò§ ÌååÏùºÏùò Í≤ΩÏö∞ Í∏∞Î≥∏ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
          const metadata = {
            width: file.type.startsWith('video/') ? 1920 : 800,
            height: file.type.startsWith('video/') ? 1080 : 600,
            duration: file.type.startsWith('video/') ? 30 : undefined,
            resolution: file.type.startsWith('video/') ? '1920x1080' : undefined
          }
          formData.append('metadata', JSON.stringify(metadata))

          console.log(`üì§ ÏóÖÎ°úÎìú ÏãúÏûë: ${file.name} (${(file.size / 1024 / 1024).toFixed(1)}MB)`)

          const response = await fetch('/api/railway/storage?action=upload', {
            method: 'POST',
            body: formData
          })

          // ÏßÑÌñâÎ•† ÏóÖÎç∞Ïù¥Ìä∏ - 50%
          set((state) => ({
            uploadQueue: state.uploadQueue.map((item) =>
              item.id === queueId ? { ...item, progress: 50 } : item
            ),
            overallProgress: Math.round(((index * 100 + 50) / (files.length * 100)) * 100)
          }))

          options?.onProgress?.({
            fileName: file.name,
            processed: index,
            total: files.length,
            fileProgress: 50,
            overallProgress: Math.round(((index * 100 + 50) / (files.length * 100)) * 100),
            status: 'processing'
          })

          if (!response.ok) {
            throw new Error(`ÏóÖÎ°úÎìú Ïã§Ìå®: ${response.status} ${response.statusText}`)
          }

          const result = await response.json()

          if (!result.success) {
            throw new Error(result.error || 'ÏóÖÎ°úÎìú Ïã§Ìå®')
          }

          // ÏóÖÎ°úÎìú ÏÑ±Í≥µ - API ÏùëÎãµÏúºÎ°úÎ∂ÄÌÑ∞ GalleryMediaData ÏÉùÏÑ±
          const newMedia: GalleryMediaData = {
            id: result.data.id,
            type: result.data.type,
            url: result.data.url,
            originalUrl: result.data.originalUrl || result.data.url,
            width: result.data.width || 800,
            height: result.data.height || 600,
            fileName: result.data.fileName,
            customName: result.data.title || result.data.originalFileName,
            uploadedAt: new Date(result.data.uploadedAt).getTime(),
            duration: result.data.duration,
            resolution: result.data.resolution
          }

          uploadedMedia.push(newMedia)

          // ÏôÑÎ£å Ï≤òÎ¶¨
          set((state) => ({
            uploadQueue: state.uploadQueue.map((item) =>
              item.id === queueId ? { ...item, status: 'completed', progress: 100, completedAt: Date.now() } : item
            ),
            overallProgress: Math.round(((index + 1) / files.length) * 100)
          }))

          options?.onProgress?.({
            fileName: file.name,
            processed: index + 1,
            total: files.length,
            fileProgress: 100,
            overallProgress: Math.round(((index + 1) / files.length) * 100),
            status: 'completed'
          })

          console.log(`‚úÖ ÏóÖÎ°úÎìú ÏôÑÎ£å: ${file.name} ‚Üí ${result.data.fileName}`)

        } catch (error) {
          console.error(`‚ùå ÏóÖÎ°úÎìú Ïã§Ìå®: ${file.name}`, error)

          // Ïã§Ìå® Ï≤òÎ¶¨
          set((state) => ({
            uploadQueue: state.uploadQueue.map((item) =>
              item.id === queueId ? { ...item, status: 'error', progress: 0, error: error instanceof Error ? error.message : 'Unknown error' } : item
            )
          }))

          options?.onProgress?.({
            fileName: file.name,
            processed: index,
            total: files.length,
            fileProgress: 0,
            overallProgress: Math.round((index / files.length) * 100),
            status: 'error'
          })
        }
      }

      // ÏóÖÎ°úÎìúÎêú ÎØ∏ÎîîÏñ¥Î•º Ïä§ÌÜ†Ïñ¥Ïóê Ï∂îÍ∞Ä
      if (uploadedMedia.length > 0) {
        set((state) => ({
          media: [...state.media, ...uploadedMedia]
        }))
        console.log(`‚úÖ ${uploadedMedia.length}Í∞ú ÎØ∏ÎîîÏñ¥Í∞Ä Ïä§ÌÜ†Ïñ¥Ïóê Ï∂îÍ∞ÄÎê®`)
      }

      // ÏóÖÎ°úÎìú ÏôÑÎ£å ÌõÑ ÎØ∏ÎîîÏñ¥ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
      await get().loadMedia()

      console.log(`‚úÖ Ïã§Ï†ú ÏóÖÎ°úÎìú ÏôÑÎ£å: ${files.length}Í∞ú Ï§ë ${uploadedMedia.length}Í∞ú ÏÑ±Í≥µ`)
      set({ isLoading: false })

    } catch (error) {
      console.error('‚ùå Ï†ÑÏ≤¥ ÏóÖÎ°úÎìú ÌîÑÎ°úÏÑ∏Ïä§ Ïã§Ìå®:', error)
      set({ isLoading: false })
      throw error
    }
  },

  clearUploadQueue: () => set({ uploadQueue: [], overallProgress: 0 }),

  // Í∞ÑÏÜåÌôîÎêú ÎØ∏ÎîîÏñ¥ Í¥ÄÎ¶¨ Ìï®ÏàòÎì§
  removeMedia: async (id: string) => {
    try {
      set((state) => ({
        media: state.media.filter(media => media.id !== id)
      }))
      console.log('‚úÖ ÎØ∏ÎîîÏñ¥ ÏÇ≠Ï†ú ÏôÑÎ£å:', id)
    } catch (error) {
      console.error('‚ùå ÎØ∏ÎîîÏñ¥ ÏÇ≠Ï†ú Ïã§Ìå®:', error)
      throw error
    }
  },

  clearAllMedia: async () => {
    try {
      set({ media: [] })
      console.log('‚úÖ Î™®Îì† ÎØ∏ÎîîÏñ¥ ÏÇ≠Ï†ú ÏôÑÎ£å')
    } catch (error) {
      console.error('‚ùå Ï†ÑÏ≤¥ ÎØ∏ÎîîÏñ¥ ÏÇ≠Ï†ú Ïã§Ìå®:', error)
      throw error
    }
  },

  updateCustomName: async (id: string, customName: string) => {
    try {
      set((state) => ({
        media: state.media.map(media =>
          media.id === id ? { ...media, customName } : media
        )
      }))
      console.log('‚úÖ Ïª§Ïä§ÌÖÄ Ïù¥Î¶Ñ ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å:', id, customName)
    } catch (error) {
      console.error('‚ùå Ïª§Ïä§ÌÖÄ Ïù¥Î¶Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®:', error)
      throw error
    }
  },

  getStorageStats: async () => {
    try {
      const { media } = get()
      const images = media.filter(item => item.type === 'image').length
      const videos = media.filter(item => item.type === 'video').length

      return {
        count: media.length,
        estimatedSize: `${Math.round(media.length * 2)} MB`,
        images,
        videos
      }
    } catch (error) {
      console.error('‚ùå Ïä§ÌÜ†Î¶¨ÏßÄ ÌÜµÍ≥Ñ Ï°∞Ìöå Ïã§Ìå®:', error)
      throw error
    }
  },

  // ÎØ∏ÎîîÏñ¥ Î∞∞Ïπò Î∞è ÏÖîÌîå Í∏∞Îä•
  shuffleMedia: () => {
    set((state) => ({
      media: shuffleArray([...state.media])
    }))
    console.log('üîÄ ÎØ∏ÎîîÏñ¥ ÏÖîÌîå ÏôÑÎ£å')
  },

  randomizeMedia: (count = 10) => {
    set((state) => ({
      media: getRandomElements(state.media, count)
    }))
    console.log(`üé≤ ÎûúÎç§ ÎØ∏ÎîîÏñ¥ ÏÑ†ÌÉù ÏôÑÎ£å: ${count}Í∞ú`)
  },

  arrangeByRatio: (config?: Partial<MediaRatioConfig>) => {
    const currentConfig = get().ratioConfig
    const newConfig = { ...currentConfig, ...config }

    set((state) => ({
      media: arrangeMediaByRatio(state.media, newConfig),
      ratioConfig: newConfig
    }))
    console.log('üìä ÎπÑÏú® Í∏∞Î∞ò ÎØ∏ÎîîÏñ¥ Î∞∞Ïπò ÏôÑÎ£å')
  },

  shuffleByMode: () => {
    const { ratioConfig, media } = get()
    if (ratioConfig.shuffleMode === 'ratio-based') {
      get().arrangeByRatio()
    } else {
      get().shuffleMedia()
    }
  },

  updateRatioConfig: (config: Partial<MediaRatioConfig>) => {
    set((state) => ({
      ratioConfig: { ...state.ratioConfig, ...config }
    }))
  },

  validateAndCleanData: async () => {
    try {
      console.log('‚úÖ Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù Î∞è Ï†ïÎ¶¨ ÏôÑÎ£å')
    } catch (error) {
      console.error('‚ùå Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù Ïã§Ìå®:', error)
      throw error
    }
  },

  deleteItemById: async (id: string) => {
    return get().removeMedia(id)
  }
}))

// Í∏∞Î≥∏ ÎÇ¥Î≥¥ÎÇ¥Í∏∞
export default useMediaStore