// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// 🔥 COMPLETE DATABASE_URL FIX - 2025-09-18 - temp:5432 문제 완전 해결 - NIXPACKS_NO_CACHE=1 배포

generator client {
  provider = "prisma-client-js"
}

// 🔧 Railway PostgreSQL 우선, 연결 실패시 자동 fallback
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for admin authentication
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String
  role          UserRole  @default(USER)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  uploadedModels AIModel[] @relation("UploadedByUser")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Core AI Model entity
model AIModel {
  id                  String      @id @default(cuid())
  name                String
  slug                String      @unique
  description         String?
  
  // File information
  fileType            FileType
  originalFilename    String
  fileUrl             String      // Main file URL (S3)
  thumbnailUrl        String?     // Thumbnail for videos
  fileSize            Int         // File size in bytes
  dimensions          Json?       // {width, height} for images/videos
  duration            Int?        // Duration for videos in seconds
  
  // AI Generation metadata (extracted from filenames)
  aiGenerationTool    String?     // u3934589919, imgvnf, generation, etc.
  extractedPrompt     String? // Auto-parsed from filename
  seriesUuid          String?     // UUID from filename for grouping
  variationNumber     Int?        // _0, _1, _2 pattern
  
  // Classification
  category            Category
  industry            Industry?
  tags                String?    // JSON string for tags array
  
  // Status and management
  status              ModelStatus @default(PENDING)
  featured            Boolean     @default(false)
  isPublic            Boolean     @default(false)
  
  // Upload and processing
  uploadedById        String
  uploadedBy          User        @relation("UploadedByUser", fields: [uploadedById], references: [id])
  uploadBatchId       String?     // For batch processing
  processingStatus    ProcessingStatus @default(PENDING)
  processingError     String?
  
  // SEO and metadata
  seoTitle            String?
  seoDescription      String?
  altText             String?
  
  // Analytics
  viewCount           Int         @default(0)
  downloadCount       Int         @default(0)
  
  // Timestamps
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  publishedAt         DateTime?

  // Relations
  inquiries           Inquiry[]

  @@index([category, status, isPublic])
  @@index([uploadBatchId])
  @@index([aiGenerationTool])
  @@index([seriesUuid, variationNumber])
  @@index([createdAt])
  @@map("ai_models")
}

// Inquiry system (4-step process from BlurBlur.ai)
model Inquiry {
  id            String        @id @default(cuid())
  inquiryNumber String        @unique // Auto-generated inquiry number
  
  // Step 1: Inquiry type
  inquiryType   InquiryType
  
  // Step 2: Selected model
  modelId       String?
  model         AIModel?      @relation(fields: [modelId], references: [id])
  
  // Step 3: Requirements
  requirements  String
  budget        String?
  timeline      String?
  additionalDetails String?
  
  // Step 4: Client information
  clientName    String
  clientEmail   String
  clientPhone   String?
  clientCompany String?
  
  // Status tracking
  status        InquiryStatus @default(NEW)
  priority      Priority      @default(NORMAL)
  
  // Response tracking
  responseRequired Boolean     @default(true)
  respondedAt      DateTime?
  respondedBy      String?     // User ID who responded
  internalNotes    String?
  
  // Timestamps
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([status, priority])
  @@index([inquiryType])
  @@index([createdAt])
  @@map("inquiries")
}

// Upload batch tracking for bulk operations
model UploadBatch {
  id                String      @id @default(cuid())
  batchName         String
  totalFiles        Int
  processedFiles    Int         @default(0)
  successfulFiles   Int         @default(0)
  failedFiles       Int         @default(0)
  
  status            BatchStatus @default(PROCESSING)
  startedAt         DateTime    @default(now())
  completedAt       DateTime?
  
  uploadedById      String
  sourceDirectory   String?     // Original directory path
  
  // Processing settings
  autoClassify      Boolean     @default(true)
  autoExtractMeta   Boolean     @default(true)
  autoGenerateTags  Boolean     @default(true)
  
  errorLog          String?
  
  @@index([status])
  @@index([startedAt])
  @@map("upload_batches")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum FileType {
  IMAGE
  VIDEO
}

enum Category {
  ASIAN
  EUROPEAN
  AFRICAN_AMERICAN
  HISPANIC
  SPECIAL
}

enum Industry {
  FASHION
  COSMETICS
  LEISURE_SPORTS
  HEALTHCARE
  TECHNOLOGY
  FOOD_BEVERAGE
  AUTOMOTIVE
  REAL_ESTATE
  EDUCATION
  FINANCE
  OTHER
}

enum ModelStatus {
  PENDING
  APPROVED
  REJECTED
  DRAFT
}

enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum InquiryType {
  MODEL_LICENSING
  CUSTOM_GENERATION
  BULK_PURCHASE
  COLLABORATION
  OTHER
}

enum InquiryStatus {
  NEW
  IN_PROGRESS
  RESPONDED
  CLOSED
  CANCELLED
}

enum Priority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum BatchStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Railway Volume용 간단한 Media 모델 - 하이브리드 스토리지 지원
model Media {
  id              String    @id @default(cuid())
  fileName        String    // 실제 파일명 (고유)
  originalFileName String   // 원본 파일명
  title           String    // 화면 표시용 제목
  type            String    // 'image' 또는 'video'
  fileSize        Int       // 파일 크기 (bytes)
  mimeType        String    // MIME 타입
  width           Int?      // 이미지/비디오 너비
  height          Int?      // 이미지/비디오 높이
  duration        Float?    // 비디오 재생 시간 (초)
  resolution      String?   // 해상도 (예: '1920x1080')
  uploadedAt      DateTime  @default(now())

  // 하이브리드 스토리지 필드 (Phase 2 구현)
  fileData        String?   @db.Text  // Base64 인코딩된 파일 데이터 (1MB 미만 파일용)
  storageType     String    @default("filesystem") // "database" | "filesystem"
  thumbnailData   String?   @db.Text  // Base64 인코딩된 썸네일 데이터

  @@map("media")
}
